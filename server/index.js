const express = require('express');
const bodyParser = require('body-parser');
const morgan = require('morgan'); //middleware de logare
const helmet = require('helmet'); //middleware de securitate

const routes = require('./routes');
const app = express();

const fs = require('fs');
const multer = require('multer');
const upload = multer(); // setting the default


app.use(helmet());
app.use(morgan(':remote-addr - :remote-user [:date[web]] ":method :url HTTP/:http-version" :status :res[content-length]'));
// app.use(express.json());
// app.use(express.urlencoded({ extended: false }));
app.use(upload.array())
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));

app.use('/api/v1', routes);

// handler de erori declarat ca middleware
app.use((err, req, res, next) => {
    console.trace(err);
    let status = 500;
    let message = 'Something Bad Happened';
    if (err.httpStatus) {
        status = err.httpStatus;
        message = err.message;
    }
    res.status(status).json({
        error: message,
    });
});







let counter = 0;

app.post('/upload', (req, res, data) => {

    //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an autogenerated name
    const {
        base64dataImages
    } = req.body;


    base64dataImages.map((base64data) => {
        let b64d;
        // console.log(base64data.charAt(9))
        const imageFormat = base64data.substring("data:image/".length, base64data.indexOf(";base64"))
        switch (imageFormat) {
            case "png":
                b64d = base64data.replace(/^data:image\/png;base64,/, "");
                break;
            case "jpg":
                b64d = base64data.replace(/^data:image\/jpg;base64,/, "");
                break;
            case "jpeg":
                b64d = base64data.replace(/^data:image\/jpeg;base64,/, "");
                break;
            case "webp":
                b64d = base64data.replace(/^data:image\/webp;base64,/, "");
                break;
            default:
        }

        fs.writeFile(`out${counter}.${imageFormat}`, b64d, 'base64', function (err) {

        })
        counter++;
    })


});


const PORT = 5000;
app.listen(PORT, () => {
    console.log(`App is listening on ${PORT}`);
})